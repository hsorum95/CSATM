AWSTemplateFormatVersion: 2010-09-09
Description: 'Online Pharamacy infrastructure for Hakon Sorums Master Thesis fall 2022'


Parameters: 
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.small
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge, t3.nano, t3.micro, t3.small, t3.medium, t3.large]
    ConstraintDescription: must be a valid EC2 instance type.
  HttpsLocation:
    Description: The IP address range that can be used to access the web-shop
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AvailabilityZoneOne:
    Description: AZ we use for all network related named one
    Type: String
    Default: 'eu-west-1a'
  AvailabilityZoneTwo:
    Description: AZ we use for all network related named Two
    Default: 'eu-west-1b'
    Type: String



Resources:  
  PharmacyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: keyname
          Value: value

  internetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: keyname
          Value: value
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PharmacyVPC
      InternetGatewayId: !Ref internetGW

  publicSubAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneOne
      VpcId: !Ref PharmacyVPC
      CidrBlock: 192.168.1.0/28
      Tags:
        - Key: trustzone
          Value: value

  publicSubAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneTwo
      VpcId: !Ref PharmacyVPC
      CidrBlock: 192.168.2.0/28
      Tags:
        - Key: trustzone
          Value: value

  privateSubFEAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneOne
      VpcId: !Ref PharmacyVPC
      CidrBlock: 192.168.3.0/28
      Tags:
          - Key: trustzone
            Value: value

  privateSubFEAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneTwo
      VpcId: !Ref PharmacyVPC
      CidrBlock: 192.168.4.0/28
      Tags:
          - Key: trustzone
            Value: value

  privateSubBEAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneOne
      VpcId: !Ref PharmacyVPC
      CidrBlock: 192.168.5.0/28
      Tags:
          - Key: trustzone
            Value: value

  privateSubBEAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneTwo
      VpcId: !Ref PharmacyVPC
      CidrBlock: 192.168.6.0/28
      Tags:
        - Key: keyname
          Value: value

  privateSubDB1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneOne
      VpcId: !Ref PharmacyVPC
      CidrBlock: 192.168.7.0/28
      Tags:
        - Key: keyname
          Value: value

  privateSubDB2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneTwo
      VpcId: !Ref PharmacyVPC
      CidrBlock: 192.168.8.0/28
      Tags:
        - Key: keyname
          Value: value
    
  externalALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'External-ALB-SG'
      GroupDescription: 'Allow traffic from the internet to the application'
      VpcId: !Ref PharmacyVPC
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref HttpsLocation
        - IpProtocol: TCP
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref HttpsLocation


  frontEndSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'FrontEnd-SG'
      GroupDescription: 'Allows traffic from external LB to FrontEnd'
      VpcId: !Ref PharmacyVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref externalALBSG
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
        - SourceSecurityGroupId: !Ref externalALBSG
          FromPort: 22
          ToPort: 22
          IpProtocol: TCP
      
  FrontEndEgress:
    Type: AWS::EC2::SecurityGroupEgress    
    Properties: 
          GroupId: !Ref frontEndSG
          DestinationSecurityGroupId: !Ref internalALBSG
          FromPort: 443 #To not waste time with certificates on the ALB
          ToPort: 443
          IpProtocol: TCP

  internalALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'Internal-ALB-SG'
      GroupDescription: 'Allow traffic from frontend to backend'
      VpcId: !Ref PharmacyVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref frontEndSG
          IpProtocol: TCP
          FromPort: 443
          ToPort: 443


  InternalALBEgress:
    Type: AWS::EC2::SecurityGroupEgress    
    Properties: 
          GroupId: !Ref internalALBSG
          DestinationSecurityGroupId: !Ref backEndSG
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP

  backEndSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'BackEnd-SG'
      GroupDescription: 'Allows traffic from frontend and to database'
      VpcId: !Ref PharmacyVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref internalALBSG
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP
      
  backEndEgress:
    Type: AWS::EC2::SecurityGroupEgress    
    Properties: 
          GroupId: !Ref backEndSG
          DestinationSecurityGroupId: !Ref dbSG
          FromPort: 1443
          ToPort: 1443
          IpProtocol: TCP

  dbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'DataBase-SG'
      GroupDescription: 'Allows traffic from the backend'
      VpcId: !Ref PharmacyVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref backEndSG
          FromPort: 1443
          ToPort: 1443
          IpProtocol: TCP

    
  publicALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: publicRequestLoadbalancing
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt externalALBSG.GroupId
      Subnets: 
        - !Ref publicSubAz1
        - !Ref publicSubAz2
      Type: 'application'

  ListnerPublicALB:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref publicALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref TargetGroupFEALB

  TargetGroupFEALB:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      VpcId: !Ref PharmacyVPC
      Protocol: HTTP
 
  frontEndLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-front-end-launch-template
      LaunchTemplateData: 
        InstanceType: !Ref InstanceType
        ImageId: "ami-0ea0f26a6d50850c5"
        KeyName: ec2keyz
        SecurityGroupIds:
          - !Ref frontEndSG
        UserData: 
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello from Region Eu-west-1</h1>" > /var/www/html/index.html

  backEndLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-back-end-launch-template
      LaunchTemplateData: 
        ImageId: "ami-0ea0f26a6d50850c5"
        InstanceType: !Ref InstanceType
        KeyName: ec2keyz
        SecurityGroupIds:
          - !Ref backEndSG

    
  frontEndASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref privateSubFEAz1
        - !Ref privateSubFEAz2
      AvailabilityZones:
        - !Ref AvailabilityZoneOne
        - !Ref AvailabilityZoneTwo
      LaunchTemplate:
          LaunchTemplateId: !Ref frontEndLaunchTemplate
          Version: !GetAtt frontEndLaunchTemplate.LatestVersionNumber
      TargetGroupARNs: 
        - !Ref TargetGroupFEALB
      MaxSize: '4'
      MinSize: '2'
      DesiredCapacity: '2'

    
  backEndASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref privateSubBEAz1
        - !Ref privateSubBEAz2
      AvailabilityZones:
        - !Ref AvailabilityZoneOne
        - !Ref AvailabilityZoneTwo
      LaunchTemplate: 
        LaunchTemplateId: !Ref backEndLaunchTemplate
        Version: !GetAtt backEndLaunchTemplate.LatestVersionNumber
      MaxSize: '4'
      MinSize: '2'
      DesiredCapacity: '2'